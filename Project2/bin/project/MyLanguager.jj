/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyLanguager.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(MyLanguager)package project;

public class MyLanguager/*@bgen(jjtree)*/implements MyLanguagerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMyLanguagerState jjtree = new JJTMyLanguagerState();

/*@egen*/  public static void main(String args [])  {    System.out.print("Enter your code:");    new MyLanguager(System.in);    try    {      SimpleNode n = MyLanguager.Start();      n.dump(">");      System.out.print("syntactically correct statement.\n");    }    catch (Exception e)    {      System.out.println("incorrect statement.");      System.out.println(e.getMessage());    }  }}PARSER_END(MyLanguager)SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "#" (~[ "\n", "\r" ])*         //Single Line comment start with #
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"           //Multiple Line comment start with /* and end with */
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >  
}

TOKEN : /* Keywords */
{
  < IF : "if" >
| < ELSE : "else" >
| < WHILE : "while" >
| < FOR : "for" >
| < MAIN : "main" >
| < VOID : "void" >
| < INT : "int" >
| < FLOAT : "float" >
| < DOUBLE : "double" >
| < PRINT : "print" >
| < SCAN : "scan" >
| < RETURN : "$" >
| < OBRACKET :"(" >
| < CBRACKET :")" >
| < STRING : "string" >
| < ASIGN : ":" >
}

TOKEN : /* arithmetic operation */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < EQUAL : "=" >
| < INCREMENT : "++" >
| < REM : "%" >
}

TOKEN : /* arithmetic operation */
{
  < LT : "<" >
| < GT : ">" >
| < LTE : "<=" >
| < GTE : ">=" >
| < EQ : "==" >
}


TOKEN : /* logical operation */
{
  < AND : "&" >
| < OR : "|" >
| < NOT : "~" >
}


TOKEN : /* numbers */
{
  < TERM  : <Int> | <Float> >
| < #Int : (< DIGIT >)+ >
| < #Float : (<DIGIT>)+("."(<DIGIT>)+)? >
| < DIGIT : [ "0"-"9" ] >

}

TOKEN : /* letters */
{
  < ID : (<Letter>)+ >
| < #Letter : "_" | [ "A"-"Z" ]| ["a"-"z"] >
| < String : "'" (<DIGIT> | <Letter> | " ")+ "'" > 
}

TOKEN :
{
  < STOP : ";" >
}

void ArithmeticOperation() :
{/*@bgen(jjtree) ArithmeticOperation */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETICOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArithmeticOperation */
  try {
/*@egen*/
  < PLUS >
| < MINUS >
| < MULTIPLY >
| < DIVIDE >
| < REM >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RelationalOperation() :
{/*@bgen(jjtree) RelationalOperation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RelationalOperation */
  try {
/*@egen*/
  < LT  >
| < GT  >
| < LTE >
| < GTE >
| < EQ  >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LogicalOperation() :
{/*@bgen(jjtree) LogicalOperation */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalOperation */
  try {
/*@egen*/
  < AND  >
| < OR   >
| < NOT  >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void arithmeticStatment() :
{/*@bgen(jjtree) arithmeticStatment */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETICSTATMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) arithmeticStatment */
  try {
/*@egen*/
  <TERM> ((ArithmeticOperation() <TERM>)+)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void CONDITION() :
{/*@bgen(jjtree) CONDITION */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) CONDITION */
  try {
/*@egen*/
  (<ID> | <TERM>) RelationalOperation() (<ID> | <TERM>)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void logicalStatment() :
{/*@bgen(jjtree) logicalStatment */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALSTATMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) logicalStatment */
  try {
/*@egen*/
  CONDITION() (LogicalOperation() CONDITION())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void IfStatement() :
{/*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  <IF> <OBRACKET> logicalStatment() <CBRACKET>  exp() ( <ELSE>  exp() )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}


void exp() :
{/*@bgen(jjtree) exp */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) exp */
  try {
/*@egen*/
  <ID> <ASIGN> (arithmeticStatment() | <String >)
| <PRINT>  (<String > | <ID>)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void dataType() :
{/*@bgen(jjtree) dataType */
  SimpleNode jjtn000 = new SimpleNode(JJTDATATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) dataType */
  try {
/*@egen*/
  < INT > <ID > ( <ASIGN> arithmeticStatment() )?
| < FLOAT > <ID > ( <ASIGN> arithmeticStatment() )?
| < STRING > <ID > ( <ASIGN>  <String > )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void code() :
{/*@bgen(jjtree) code */
  SimpleNode jjtn000 = new SimpleNode(JJTCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) code */
 try {
/*@egen*/
 ( arithmeticStatment() | dataType() | IfStatement() )/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  code() < STOP >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}